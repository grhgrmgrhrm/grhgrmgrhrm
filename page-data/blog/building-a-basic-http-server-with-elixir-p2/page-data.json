{"componentChunkName":"component---src-layout-post-layout-js","path":"/blog/building-a-basic-http-server-with-elixir-p2","result":{"data":{"markdownRemark":{"frontmatter":{"slug":"building-a-basic-http-server-with-elixir-p2","title":"Building a Basic HTTP Server with Elixir and OTP - Part 2","description":"Part 2 - Plug, Cowboy and HTTP.","date":"2018-12-28T00:00:00.000Z"},"html":"<p>If you haven't read Part 1 yet, go read it <a href=\"http://www.matthewsecrist.net//building-a-basic-http-server-with-elixir-p1/\">here</a></p>\n<p>You can view the full implementation <a href=\"https://github.com/matthewsecrist/TodoOTP-HTTP\">here</a></p>\n<p>In the first part of our tutorial, we built a simple GenServer that can add, toggle, remove and list Todos. Now, we'll wire it up to an HTTP server driven by <code class=\"language-text\">Plug</code> and <code class=\"language-text\">Cowboy</code>. Lets go back to our app and in <code class=\"language-text\">mix.exs</code> we are going to add</p>\n<blockquote>\n<p>mix.exs</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defp</span>  deps  <span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:cowboy</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"~> 2.6\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:plug_cowboy</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"~> 2.0\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:plug</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"~> 1.7\"</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>and make sure to start them up with the app.</p>\n<blockquote>\n<p>mix.exs</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">def</span>  application  <span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">[</span>\n\t\t<span class=\"token attr-name\">extra_applications:</span>  <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:logger</span><span class=\"token punctuation\">,</span>  <span class=\"token atom symbol\">:cowboy</span><span class=\"token punctuation\">,</span>  <span class=\"token atom symbol\">:plug</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token attr-name\">mod:</span>  <span class=\"token punctuation\">{</span>Todo<span class=\"token punctuation\">.</span>Application<span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>If you're not familiar with <a href=\"https://hexdocs.pm/plug/readme.html\">Plug</a> or <a href=\"https://ninenines.eu/docs/en/cowboy/2.6/guide/\">Cowboy</a>, you can check them out at those links.</p>\n<p>Open up a terminal window and run <code class=\"language-text\">mix deps.get</code> to download the new dependencies. Then we'll update our supervision tree.</p>\n<blockquote>\n<p>lib/todo/application.ex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">require</span>  Logger\n\n<span class=\"token keyword\">def</span>  start<span class=\"token punctuation\">(</span>_type<span class=\"token punctuation\">,</span>  _args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\tchildren <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>Plug<span class=\"token punctuation\">.</span>Cowboy<span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">scheme:</span>  <span class=\"token atom symbol\">:http</span><span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">plug:</span>  Todo<span class=\"token punctuation\">.</span>Router<span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">options:</span>  <span class=\"token punctuation\">[</span><span class=\"token attr-name\">port:</span>  <span class=\"token number\">3000</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>Todo<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">[</span><span class=\"token attr-name\">name:</span>  Todo<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n\nLogger<span class=\"token punctuation\">.</span>info<span class=\"token punctuation\">(</span><span class=\"token string\">\"Starting application on port 3000.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>And then we need to make our router. Go ahead and create <code class=\"language-text\">lib/todo/router.ex</code></p>\n<blockquote>\n<p>lib/todo/router.ex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> Todo<span class=\"token punctuation\">.</span>Router <span class=\"token keyword\">do</span>\n\t<span class=\"token keyword\">use</span>  Plug<span class=\"token punctuation\">.</span>Router\n\n\tplug<span class=\"token punctuation\">(</span>Plug<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">)</span>\n\tplug<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:match</span><span class=\"token punctuation\">)</span>\n\tplug<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:dispatch</span><span class=\"token punctuation\">)</span>\n\n\tget <span class=\"token string\">\"/\"</span> <span class=\"token keyword\">do</span>\n\t\tsend_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n\n\tmatch<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> send_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"This is not the page you are looking for\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>That gets us a basic starter to test out our server. We can then <code class=\"language-text\">iex -S mix</code> and then visit <code class=\"language-text\">http://localhost:3000</code>. You should be presented with a page that says <code class=\"language-text\">Hello, world!</code>. If you go to <code class=\"language-text\">http://localhost:3000/thisshouldnotexist</code> we'll see <code class=\"language-text\">This is not the page you are looking for</code>. That means that everything is playing nicely!</p>\n<p>Lets make sure we can serve an HTML file. Create a new file at <code class=\"language-text\">/lib/todo/template.html.eex</code></p>\n<blockquote>\n<p>lib/todo/template.html.eex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>OTP Todo App<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/static/todo.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Todo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<blockquote>\n<p>priv/static/todo.css</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #dddddd<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #333333<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And create the .css file and put it into <code class=\"language-text\">priv/static/todo.css</code>. Its important that the file goes into that folder because we can tell plug to serve our static assets from there as shown below.</p>\n<p>Update <code class=\"language-text\">lib/todo/router.ex</code> ...</p>\n<blockquote>\n<p>router.ex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span>  Todo<span class=\"token punctuation\">.</span>Router  <span class=\"token keyword\">do</span>\n\t<span class=\"token keyword\">use</span>  Plug<span class=\"token punctuation\">.</span>Router\n\t<span class=\"token keyword\">require</span>  EEx\n\n\t<span class=\"token keyword\">alias</span> Todo<span class=\"token punctuation\">.</span>Server\n\n\t<span class=\"token attribute variable\">@template</span> <span class=\"token string\">\"lib/todo/template.html.eex\"</span>\n\n\tplug<span class=\"token punctuation\">(</span>Plug<span class=\"token punctuation\">.</span>Static<span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">from:</span>  <span class=\"token atom symbol\">:todo</span><span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">at:</span>  <span class=\"token string\">\"/static\"</span><span class=\"token punctuation\">)</span>\n\tplug<span class=\"token punctuation\">(</span>Plug<span class=\"token punctuation\">.</span>Logger<span class=\"token punctuation\">)</span>\n\tplug<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:match</span><span class=\"token punctuation\">)</span>\n\tplug<span class=\"token punctuation\">(</span><span class=\"token atom symbol\">:dispatch</span><span class=\"token punctuation\">)</span>\n\n\tget <span class=\"token string\">\"/\"</span>  <span class=\"token keyword\">do</span>\n\t\tresponse <span class=\"token operator\">=</span>  EEx<span class=\"token punctuation\">.</span>eval_file<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@template</span><span class=\"token punctuation\">)</span>\n\t\tsend_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span>  <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>I added the <code class=\"language-text\">alias Todo.Server</code> here because we'll need that later, but it won't serve any purpose right now. The <code class=\"language-text\">plug(Plug.Static, from: :todo, at: &quot;/static&quot;)</code> portion is the important part for the CSS, so that Plug knows that anything served from <code class=\"language-text\">localhost:3000/static</code> is served from that folder.</p>\n<p>Now, restart your server. Visiting <code class=\"language-text\">http://localhost:3000</code> now should show you a nice HTML Page with a gray background and the word \"Todo\".</p>\n<p>Next up, wiring up the GenServer!</p>\n<p>Back in <code class=\"language-text\">lib/todo/router.ex</code>, we'll modify our <code class=\"language-text\">get &quot;/&quot;</code> function</p>\n<blockquote>\n<p>router.ex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">get <span class=\"token string\">\"/\"</span>  <span class=\"token keyword\">do</span>\n\ttodos <span class=\"token operator\">=</span>  Server<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tresponse <span class=\"token operator\">=</span>  EEx<span class=\"token punctuation\">.</span>eval_file<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@template</span><span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">todos:</span> todos<span class=\"token punctuation\">)</span>\n\tsend_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span>  <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And in our template, under the <code class=\"language-text\">&lt;h1&gt;Todo&lt;/h1&gt;</code> we'll add</p>\n<blockquote>\n<p>template.html.eex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;ul&gt;\n\t&lt;%=  for todo &lt;- todos do  %&gt;\n\t\t&lt;li&gt;&lt;%= todo.name %&gt;  &lt;/li&gt;\n\t&lt;%  end  %&gt;\n&lt;/ul&gt;</code></pre></div>\n<p>Restart the server again, refresh <code class=\"language-text\">http://localhost:3000</code> and... not much changed. Well, we don't have any todos. Back in your terminal, hit <code class=\"language-text\">enter</code> and you'll be able to type in the REPL. Lets do <code class=\"language-text\">Todo.Server.add(&quot;Hello, world!&quot;)</code> and refresh the page again.</p>\n<p>You should now see your Todo on the page!</p>\n<p>Moving on, we need a way to add Todos from the page. We need to add a form that posts to \"/\" and the server needs to re-serve the page with the updated Todos.</p>\n<p>Lets add the form first.</p>\n<blockquote>\n<p>template.html.eex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>new-item<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">pattern</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.{3,}<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">required</span>\n    <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Write a new todo item<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3 characters minimum<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Add new item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>add-new-item<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>And then in router, we'll add a <code class=\"language-text\">post &quot;/&quot;</code> and a few helper functions to reduce code duplication.</p>\n<blockquote>\n<p>router.ex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">post <span class=\"token string\">\"/\"</span>  <span class=\"token keyword\">do</span>\n\tresponse <span class=\"token operator\">=</span>\n\t\tread_input<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span>  String<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span>  Server<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span> build_response\n\n\tsend_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span>  <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\"># Private</span>\n<span class=\"token keyword\">defp</span>  read_input<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\t<span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:ok</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span>  _conn<span class=\"token punctuation\">}</span>  <span class=\"token operator\">=</span> read_body<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t<span class=\"token string\">\"item=\"</span>  <span class=\"token operator\">&lt;></span> item <span class=\"token operator\">=</span> body\n\titem\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">defp</span>  build_response<span class=\"token punctuation\">(</span>todos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n\tEEx<span class=\"token punctuation\">.</span>eval_file<span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@template</span><span class=\"token punctuation\">,</span>  <span class=\"token attr-name\">todos:</span> todos<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>When adding a Todo item, it will come in the form of \"item=this+is+a+todo+item\", so doing <code class=\"language-text\">&quot;item=&quot; &lt;&gt; item = body</code> lets us grab just the item. After that, we have to replace the <code class=\"language-text\">+</code> and put in a space instead.</p>\n<p>Restarting the server and refreshing the page again should show us our new form and we can now add a todo to the list and see it on the page!</p>\n<p>Now that we've got the basics, we'll quickly add the rest in. In our <code class=\"language-text\">template.html.eex</code></p>\n<blockquote>\n<p>template.html.eex</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">&lt;ul<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span><span class=\"token operator\">=</span>  <span class=\"token keyword\">for</span> todo <span class=\"token operator\">&lt;-</span> todos <span class=\"token keyword\">do</span>  <span class=\"token punctuation\">%</span><span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span>li  class<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span>>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span><span class=\"token operator\">=</span>  <span class=\"token keyword\">if</span> todo<span class=\"token punctuation\">.</span>done <span class=\"token keyword\">do</span>  <span class=\"token punctuation\">%</span><span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>span  class<span class=\"token operator\">=</span><span class=\"token string\">\"todo-item\"</span>><span class=\"token operator\">&lt;</span>s<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span><span class=\"token operator\">=</span> todo<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>s<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>form  method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>  action<span class=\"token operator\">=</span><span class=\"token string\">\"toggle\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  type<span class=\"token operator\">=</span><span class=\"token string\">\"hidden\"</span>  name<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%= todo.id %>\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  class<span class=\"token operator\">=</span><span class=\"token string\">\"incomplete\"</span>  type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"Not Done\"</span>  <span class=\"token operator\">/</span>>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n\t\t\t\t<span class=\"token operator\">&lt;</span>form  method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>  action<span class=\"token operator\">=</span><span class=\"token string\">\"delete\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  type<span class=\"token operator\">=</span><span class=\"token string\">\"hidden\"</span>  name<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%= todo.id %>\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  class<span class=\"token operator\">=</span><span class=\"token string\">\"delete\"</span>  type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"Remove\"</span>  <span class=\"token operator\">/</span>>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span>  <span class=\"token keyword\">else</span>  <span class=\"token punctuation\">%</span><span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>span  class<span class=\"token operator\">=</span><span class=\"token string\">\"todo-item\"</span>><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span><span class=\"token operator\">=</span> todo<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">%</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>form  method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>  action<span class=\"token operator\">=</span><span class=\"token string\">\"toggle\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  type<span class=\"token operator\">=</span><span class=\"token string\">\"hidden\"</span>  name<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%= todo.id %>\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  class<span class=\"token operator\">=</span><span class=\"token string\">\"incomplete\"</span>  type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"Done\"</span>  <span class=\"token operator\">/</span>>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n\t\t\t<span class=\"token operator\">&lt;</span>form  method<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>  action<span class=\"token operator\">=</span><span class=\"token string\">\"delete\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  type<span class=\"token operator\">=</span><span class=\"token string\">\"hidden\"</span>  name<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"&lt;%= todo.id %>\"</span>>\n\t\t\t\t<span class=\"token operator\">&lt;</span>input  class<span class=\"token operator\">=</span><span class=\"token string\">\"delete\"</span>  type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span>  value<span class=\"token operator\">=</span><span class=\"token string\">\"Remove\"</span>  <span class=\"token operator\">/</span>>\n\t\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span>  <span class=\"token keyword\">end</span>  <span class=\"token punctuation\">%</span><span class=\"token operator\">></span>\n\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">%</span>  <span class=\"token keyword\">end</span>  <span class=\"token punctuation\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span></code></pre></div>\n<p>And then in our <code class=\"language-text\">router.ex</code> file...</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">post <span class=\"token string\">\"/toggle\"</span>  <span class=\"token keyword\">do</span>\n\tresponse <span class=\"token operator\">=</span>\n\t\tread_input<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span>  Server<span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span> build_response\n\n\tsend_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span>  <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\npost <span class=\"token string\">\"delete\"</span>  <span class=\"token keyword\">do</span>\n\tresponse <span class=\"token operator\">=</span>\n\t\tread_input<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span>  Server<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">|></span> build_response\n\n\tsend_resp<span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">,</span>  <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And finally, we'll restart the server again and now you should be able to add a todo, mark it as complete and delete it successfully. I'm not going to go over the styling in this post, because obviously, its out of scope of what I'm showing here.</p>\n<p>Just to recap, we now have an HTTP server that will display an HTML Page that is backed by the state provided by our GenServer without the extras that Phoenix would provide us. Again, this is NOT meant as a replacement to Phoenix, and personally, I would recommend using that, but this is a great way to learn how Plug and Cowboy work.</p>\n<p>As always, if you have any questions or comments, let me know by sending me a <a href=\"https://twitter.com/_mattsecrist\">tweet</a>!</p>"}},"pageContext":{"slug":"building-a-basic-http-server-with-elixir-p2"}},"staticQueryHashes":["2837053904","3706524088"]}